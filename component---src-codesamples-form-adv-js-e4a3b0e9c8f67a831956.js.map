{"version":3,"sources":["webpack:///./src/codesamples/formAdv.js"],"names":["schema","Yup","values","shape","lots","of","name","notOneOf","duplicateLotNames","required","quantities","typeError","min","integer","SIZES","initialValues","id","CustomField","_ref","field","react__WEBPACK_IMPORTED_MODULE_3___default","a","createElement","grommet__WEBPACK_IMPORTED_MODULE_7__","__webpack_exports__","grommet__WEBPACK_IMPORTED_MODULE_8__","formik__WEBPACK_IMPORTED_MODULE_4__","validationSchema","onSubmit","_ref2","setSubmitting","setTimeout","alert","JSON","stringify","_ref3","isSubmitting","isValid","grommet__WEBPACK_IMPORTED_MODULE_9__","direction","justify","grommet__WEBPACK_IMPORTED_MODULE_10__","map","size","key","arrayHelpers","length","lot","lotIndex","_ref4","component","Text","quantity","quantityIndex","align","grommet__WEBPACK_IMPORTED_MODULE_11__","onClick","push","Array","fill","uuid","grommet_icons__WEBPACK_IMPORTED_MODULE_12__","primary","type","textAlign"],"mappings":"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","file":"component---src-codesamples-form-adv-js-e4a3b0e9c8f67a831956.js","sourcesContent":["import React from 'react'\r\nimport {\r\n  Formik,\r\n  Form,\r\n  Field,\r\n  ErrorMessage,\r\n  FieldArray,\r\n} from 'formik'\r\nimport * as Yup from 'yup'\r\nimport uuid from 'uuid/v4'\r\n\r\nimport {\r\n  Box,\r\n  Button,\r\n  Grid,\r\n  Grommet,\r\n  Text,\r\n  TextInput,\r\n} from 'grommet'\r\n\r\nimport { Add } from 'grommet-icons'\r\n\r\nconst schema = () => {\r\n  return Yup.lazy(values => {\r\n    const lotNames = []\r\n\r\n    /*  lotName = values.lots\r\n      .map(lot => lot.name)\r\n      .map(name => ({ count: 1, name }))\r\n      .reduce((a, b) => {\r\n        a[b.name] =\r\n          (a[b.name] || 0) + b.count\r\n        return a\r\n      }, {})\r\n    console.log(lotNames)\r\n    const duplicateLotNames = Object.keys(\r\n      lotNames\r\n    ).filter(a => lotNames[a] > 1) */\r\n\r\n    return Yup.object().shape({\r\n      lots: Yup.array().of(\r\n        Yup.object().shape({\r\n          name: Yup.string()\r\n            .notOneOf(\r\n              duplicateLotNames,\r\n              'lotname has to be unique'\r\n            )\r\n            .required('required'),\r\n          quantities: Yup.array().of(\r\n            Yup.number()\r\n              .typeError(\r\n                'must be number'\r\n              )\r\n              .min(\r\n                0,\r\n                'must be positive'\r\n              )\r\n              .integer(\r\n                'must be integer'\r\n              )\r\n          ),\r\n        })\r\n      ),\r\n    })\r\n  })\r\n}\r\n\r\nconst countSizes = 3\r\n\r\nconst SIZES = [38, 39, 40]\r\n\r\nconst initialValues = {\r\n  lots: [\r\n    {\r\n      name: 'Test',\r\n      quantities: [\r\n        '021111',\r\n        '123',\r\n        '231',\r\n      ],\r\n      id:\r\n        '105d668b-0912-4bff-91b4-3aec881bb6ce',\r\n    },\r\n    {\r\n      name: 'sdfsd',\r\n      quantities: ['01', '21', '12'],\r\n      id:\r\n        '4041e2a2-6d47-42c1-8bf1-a3084e48992f',\r\n    },\r\n  ],\r\n}\r\n\r\nconst CustomField = ({ field }) => (\r\n  <TextInput {...field} />\r\n)\r\n\r\nexport default () => (\r\n  <Grommet>\r\n    <Formik\r\n      initialValues={initialValues}\r\n      validationSchema={schema}\r\n      onSubmit={(\r\n        values,\r\n        { setSubmitting }\r\n      ) => {\r\n        setTimeout(() => {\r\n          alert(\r\n            JSON.stringify(\r\n              values,\r\n              null,\r\n              2\r\n            )\r\n          )\r\n          setSubmitting(false)\r\n        }, 400)\r\n      }}\r\n    >\r\n      {({\r\n        isSubmitting,\r\n        values,\r\n        isValid,\r\n      }) => (\r\n        <Form>\r\n          <Box\r\n            direction=\"row\"\r\n            justify=\"between\"\r\n          >\r\n            <Text>Name of lot</Text>\r\n            {SIZES.map(size => (\r\n              <Text key={size}>\r\n                {size}\r\n              </Text>\r\n            ))}\r\n          </Box>\r\n          <FieldArray name=\"lots\">\r\n            {arrayHelpers => {\r\n              return [\r\n                values.lots &&\r\n                  values.lots.length >\r\n                    0 &&\r\n                  values.lots.map(\r\n                    (lot, lotIndex) => (\r\n                      <Box\r\n                        key={lotIndex}\r\n                        direction=\"row\"\r\n                        justify=\"center\"\r\n                      >\r\n                        <Box\r\n                          direction=\"row\"\r\n                          justify=\"center\"\r\n                        >\r\n                          <Box>\r\n                            <Field\r\n                              name={`lots[${lotIndex}].name`}\r\n                            >\r\n                              {({\r\n                                field,\r\n                              }) => (\r\n                                <TextInput\r\n                                  {...field}\r\n                                />\r\n                              )}\r\n                            </Field>\r\n                            <ErrorMessage\r\n                              component={\r\n                                Text\r\n                              }\r\n                              name={`lots[${lotIndex}].name`}\r\n                            />\r\n                          </Box>\r\n                          {lot.quantities.map(\r\n                            (\r\n                              quantity,\r\n                              quantityIndex\r\n                            ) => (\r\n                              <Box\r\n                                key={\r\n                                  quantityIndex\r\n                                }\r\n                              >\r\n                                <Field\r\n                                  component={\r\n                                    CustomField\r\n                                  }\r\n                                  name={`lots[${lotIndex}].quantities[${quantityIndex}]`}\r\n                                />\r\n                                <ErrorMessage\r\n                                  name={`lots[${lotIndex}].quantities[${quantityIndex}]`}\r\n                                />\r\n                              </Box>\r\n                            )\r\n                          )}\r\n                        </Box>\r\n                      </Box>\r\n                    )\r\n                  ),\r\n                <Box\r\n                  justify=\"center\"\r\n                  align=\"center\"\r\n                >\r\n                  <Button\r\n                    onClick={() =>\r\n                      arrayHelpers.push(\r\n                        {\r\n                          name: '',\r\n                          quantities: Array(\r\n                            countSizes\r\n                          ).fill(0),\r\n                          id: uuid(),\r\n                        }\r\n                      )\r\n                    }\r\n                  >\r\n                    <Add />\r\n                  </Button>\r\n                  <Button\r\n                    primary\r\n                    type=\"submit\"\r\n                  >\r\n                    <Text textAlign=\"center\">\r\n                      Submit\r\n                    </Text>\r\n                  </Button>\r\n                </Box>,\r\n              ]\r\n            }}\r\n          </FieldArray>\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  </Grommet>\r\n)\r\n"],"sourceRoot":""}