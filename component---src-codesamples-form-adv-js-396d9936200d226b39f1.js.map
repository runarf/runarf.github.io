{"version":3,"sources":["webpack:///./src/codesamples/formAdv.js"],"names":["schema","Yup","values","lotNames","lots","map","lot","name","count","reduce","a","b","console","log","duplicateLotNames","Object","keys","filter","shape","of","notOneOf","required","quantities","typeError","min","integer","SIZES","initialValues","id","CustomField","_ref","field","react__WEBPACK_IMPORTED_MODULE_5___default","createElement","grommet__WEBPACK_IMPORTED_MODULE_9__","__webpack_exports__","addRow","grommet__WEBPACK_IMPORTED_MODULE_10__","formik__WEBPACK_IMPORTED_MODULE_6__","validationSchema","onSubmit","_ref2","setSubmitting","setTimeout","alert","JSON","stringify","_ref3","isSubmitting","isValid","grommet__WEBPACK_IMPORTED_MODULE_11__","columns","rows","areas","start","end","grommet__WEBPACK_IMPORTED_MODULE_12__","gridArea","concat","gap","margin","align","grommet__WEBPACK_IMPORTED_MODULE_13__","size","key","arrayHelpers","push","length","lotIndex","_ref4","component","Text","quantity","quantityIndex","justify","grommet__WEBPACK_IMPORTED_MODULE_14__","onClick","remove","grommet_icons__WEBPACK_IMPORTED_MODULE_15__","pad","justifyContent","Array","fill","uuid","label","grommet_icons__WEBPACK_IMPORTED_MODULE_16__","primary","type"],"mappings":"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","file":"component---src-codesamples-form-adv-js-396d9936200d226b39f1.js","sourcesContent":["import React from 'react'\r\nimport {\r\n  Formik,\r\n  Form,\r\n  Field,\r\n  ErrorMessage,\r\n  FieldArray,\r\n} from 'formik'\r\nimport * as Yup from 'yup'\r\nimport uuid from 'uuid/v4'\r\n\r\nimport {\r\n  Box,\r\n  Button,\r\n  Grid,\r\n  Grommet,\r\n  Text,\r\n  TextInput,\r\n} from 'grommet'\r\n\r\nimport {\r\n  Add,\r\n  Close,\r\n} from 'grommet-icons'\r\n\r\nconst schema = () => {\r\n  return Yup.lazy(values => {\r\n    const lotNames = values.lots\r\n      .map(lot => lot.name)\r\n      .map(name => ({ count: 1, name }))\r\n      .reduce((a, b) => {\r\n        a[b.name] =\r\n          (a[b.name] || 0) + b.count\r\n        return a\r\n      }, {})\r\n    console.log(lotNames)\r\n    const duplicateLotNames = Object.keys(\r\n      lotNames\r\n    ).filter(a => lotNames[a] > 1)\r\n\r\n    return Yup.object().shape({\r\n      lots: Yup.array().of(\r\n        Yup.object().shape({\r\n          name: Yup.string()\r\n            .notOneOf(\r\n              duplicateLotNames,\r\n              'lotname has to be unique'\r\n            )\r\n            .required('required'),\r\n          quantities: Yup.array().of(\r\n            Yup.number()\r\n              .typeError(\r\n                'must be number'\r\n              )\r\n              .min(\r\n                0,\r\n                'must be positive'\r\n              )\r\n              .integer(\r\n                'must be integer'\r\n              )\r\n          ),\r\n        })\r\n      ),\r\n    })\r\n  })\r\n}\r\n\r\nconst countSizes = 3\r\n\r\nconst SIZES = [38, 39, 40]\r\n\r\nconst initialValues = {\r\n  lots: [\r\n    {\r\n      name: 'Test',\r\n      quantities: [\r\n        '021111',\r\n        '123',\r\n        '231',\r\n      ],\r\n      id:\r\n        '105d668b-0912-4bff-91b4-3aec881bb6ce',\r\n    },\r\n  ],\r\n}\r\n\r\nconst CustomField = ({ field }) => (\r\n  <TextInput {...field} />\r\n)\r\n\r\nexport default () => {\r\n  let addRow\r\n  return (\r\n    <Grommet>\r\n      <Formik\r\n        initialValues={initialValues}\r\n        validationSchema={schema}\r\n        onSubmit={(\r\n          values,\r\n          { setSubmitting }\r\n        ) => {\r\n          setTimeout(() => {\r\n            alert(\r\n              JSON.stringify(\r\n                values,\r\n                null,\r\n                2\r\n              )\r\n            )\r\n            setSubmitting(false)\r\n          }, 400)\r\n        }}\r\n      >\r\n        {({\r\n          isSubmitting,\r\n          values,\r\n          isValid,\r\n        }) => (\r\n          <Form>\r\n            <Grid\r\n              columns={['xsmall']}\r\n              rows={[\r\n                'auto',\r\n                'auto',\r\n                'flex',\r\n              ]}\r\n              areas={[\r\n                {\r\n                  name: 'header',\r\n                  start: [0, 0],\r\n                  end: [1, 0],\r\n                },\r\n                {\r\n                  name: 'main',\r\n                  start: [0, 1],\r\n                  end: [1, 1],\r\n                },\r\n                {\r\n                  name: 'bottom',\r\n                  start: [0, 2],\r\n                  end: [1, 2],\r\n                },\r\n              ]}\r\n            >\r\n              <Box gridArea=\"header\">\r\n                <Grid\r\n                  columns={[\r\n                    'xsmall',\r\n                    ...SIZES.map(\r\n                      () => 'xsmall'\r\n                    ),\r\n                    'xsmall',\r\n                  ]}\r\n                  gap=\"small\"\r\n                  margin=\"small\"\r\n                >\r\n                  <Box align=\"center\">\r\n                    <Text>\r\n                      Name of lot\r\n                    </Text>\r\n                  </Box>\r\n                  {SIZES.map(size => (\r\n                    <Box align=\"center\">\r\n                      <Text key={size}>\r\n                        {size}\r\n                      </Text>\r\n                    </Box>\r\n                  ))}\r\n                </Grid>\r\n              </Box>\r\n              <Box gridArea=\"main\">\r\n                <FieldArray name=\"lots\">\r\n                  {arrayHelpers => {\r\n                    addRow =\r\n                      arrayHelpers.push\r\n                    return [\r\n                      values.lots &&\r\n                        values.lots\r\n                          .length > 0 &&\r\n                        values.lots.map(\r\n                          (\r\n                            lot,\r\n                            lotIndex\r\n                          ) => (\r\n                            <Grid\r\n                              columns={[\r\n                                'xsmall',\r\n                                ...SIZES.map(\r\n                                  () =>\r\n                                    'xsmall'\r\n                                ),\r\n                                'xsmall',\r\n                              ]}\r\n                              gap=\"small\"\r\n                              margin=\"small\"\r\n                            >\r\n                              <Box>\r\n                                <Field\r\n                                  name={`lots[${lotIndex}].name`}\r\n                                >\r\n                                  {({\r\n                                    field,\r\n                                  }) => (\r\n                                    <TextInput\r\n                                      {...field}\r\n                                    />\r\n                                  )}\r\n                                </Field>\r\n                                <ErrorMessage\r\n                                  component={\r\n                                    Text\r\n                                  }\r\n                                  name={`lots[${lotIndex}].name`}\r\n                                />\r\n                              </Box>\r\n                              {lot.quantities.map(\r\n                                (\r\n                                  quantity,\r\n                                  quantityIndex\r\n                                ) => (\r\n                                  <Box\r\n                                    key={\r\n                                      quantityIndex\r\n                                    }\r\n                                  >\r\n                                    <Field\r\n                                      component={\r\n                                        CustomField\r\n                                      }\r\n                                      name={`lots[${lotIndex}].quantities[${quantityIndex}]`}\r\n                                    />\r\n                                    <ErrorMessage\r\n                                      component={\r\n                                        Text\r\n                                      }\r\n                                      name={`lots[${lotIndex}].quantities[${quantityIndex}]`}\r\n                                    />\r\n                                  </Box>\r\n                                )\r\n                              )}\r\n\r\n                              <Box justify=\"center\">\r\n                                <Button\r\n                                  onClick={() =>\r\n                                    arrayHelpers.remove(\r\n                                      lotIndex\r\n                                    )\r\n                                  }\r\n                                >\r\n                                  <Close />\r\n                                </Button>\r\n                              </Box>\r\n                            </Grid>\r\n                          )\r\n                        ),\r\n                    ]\r\n                  }}\r\n                </FieldArray>\r\n              </Box>\r\n              <Box\r\n                gridArea=\"bottom\"\r\n                pad=\"xsmall\"\r\n              >\r\n                <Grid\r\n                  columns={[\r\n                    'small',\r\n                    'small',\r\n                  ]}\r\n                  justifyContent=\"start\"\r\n                  gap=\"small\"\r\n                >\r\n                  <Box>\r\n                    <Button\r\n                      onClick={() =>\r\n                        addRow({\r\n                          name: '',\r\n                          quantities: Array(\r\n                            countSizes\r\n                          ).fill(0),\r\n                          id: uuid(),\r\n                        })\r\n                      }\r\n                      label={<Add />}\r\n                    />\r\n                  </Box>\r\n                  <Box>\r\n                    <Button\r\n                      primary\r\n                      type=\"submit\"\r\n                      label=\"Submit\"\r\n                    />\r\n                  </Box>\r\n                </Grid>\r\n              </Box>\r\n            </Grid>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </Grommet>\r\n  )\r\n}\r\n"],"sourceRoot":""}