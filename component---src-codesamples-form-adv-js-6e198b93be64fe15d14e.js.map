{"version":3,"sources":["webpack:///./src/codesamples/formAdv.js"],"names":["schema","Yup","values","lotNames","lots","map","lot","name","count","reduce","a","b","console","log","duplicateLotNames","Object","keys","filter","shape","of","notOneOf","required","quantities","typeError","min","integer","initialValues","id","__webpack_exports__","_emotion_core__WEBPACK_IMPORTED_MODULE_9__","className","formik__WEBPACK_IMPORTED_MODULE_7__","validationSchema","onSubmit","_ref","setSubmitting","setTimeout","alert","JSON","stringify","_ref2","isSubmitting","isValid","resetForm","css","_templateObject","_templateObject2","arrayHelpers","length","lotIndex","key","_templateObject3","quantity","quantityIndex","_templateObject4","type","onClick","push","Array","fill","uuid","_material_ui_core_Button__WEBPACK_IMPORTED_MODULE_11___default","disabled"],"mappings":"mvBAUA,IAAMA,EAAS,WACb,OAAOC,OAAS,SAAAC,GACd,IAAMC,EAAWD,EAAOE,KACrBC,IAAI,SAAAC,GAAG,OAAIA,EAAIC,OACfF,IAAI,SAAAE,GAAI,MAAK,CAAEC,MAAO,EAAGD,UACzBE,OAAO,SAACC,EAAGC,GAEV,OADAD,EAAEC,EAAEJ,OAASG,EAAEC,EAAEJ,OAAS,GAAKI,EAAEH,MAC1BE,GACN,IACLE,QAAQC,IAAIV,GACZ,IAAMW,EAAoBC,OAAOC,KAAKb,GAAUc,OAAO,SAAAP,GAAC,OAAIP,EAASO,GAAK,IAE1E,OAAOT,WAAaiB,MAAM,CACxBd,KAAMH,UAAYkB,GAChBlB,WAAaiB,MAAM,CACjBX,KAAMN,WACHmB,SAASN,EAAmB,4BAC5BO,SAAS,YACZC,WAAYrB,UAAYkB,GACtBlB,WACGsB,UAAU,kBACVC,IAAI,EAAG,oBACPC,QAAQ,4BAUjBC,EAAgB,CACpBtB,KAAM,CACJ,CACEG,KAAM,OACNe,WAAY,CAAC,SAAU,MAAO,OAC9BK,GAAI,wCAEN,CACEpB,KAAM,QACNe,WAAY,CAAC,KAAM,KAAM,MACzBK,GAAI,0CAKKC,EAAA,0BACbb,OAAAc,EAAA,EAAAd,CAAA,OAAKe,UAAU,mBACbf,OAAAc,EAAA,EAAAd,CAAA,MAAIe,UAAU,OAAd,yBACAf,OAAAc,EAAA,EAAAd,CAACgB,EAAA,EAAD,CACEL,cAAeA,EACfM,iBAAkBhC,EAClBiC,SAAU,SAAC/B,EAADgC,GAA+B,IAApBC,EAAoBD,EAApBC,cACnBC,WAAW,WACTC,MAAMC,KAAKC,UAAUrC,EAAQ,KAAM,IACnCiC,GAAc,IACb,OAGJ,SAAAK,GAAA,IAAGC,EAAHD,EAAGC,aAAcvC,EAAjBsC,EAAiBtC,OAAQwC,EAAzBF,EAAyBE,QAAzBF,EAAkCG,UAAlC,OACC5B,OAAAc,EAAA,EAAAd,CAACgB,EAAA,EAAD,KACEhB,OAAAc,EAAA,EAAAd,CAAA,OAAKe,UAAU,OACbf,OAAAc,EAAA,EAAAd,CAAA,OACEe,UAAU,QACVc,IAAKA,YAAFC,MAFL,eAQA9B,OAAAc,EAAA,EAAAd,CAAA,OACEe,UAAU,MACVc,IAAKA,YAAFE,MAFL,eASF/B,OAAAc,EAAA,EAAAd,CAACgB,EAAA,EAAD,CAAYxB,KAAK,QACd,SAAAwC,GAAY,OACXhC,OAAAc,EAAA,EAAAd,CAAA,WACGb,EAAOE,MACNF,EAAOE,KAAK4C,OAAS,GACrB9C,EAAOE,KAAKC,IAAI,SAACC,EAAK2C,GAAN,OACdlC,OAAAc,EAAA,EAAAd,CAAA,OAAKe,UAAU,MAAMoB,IAAK5C,EAAIqB,IAC5BZ,OAAAc,EAAA,EAAAd,CAAA,OACEe,UAAU,QACVc,IAAKA,YAAFO,MAIHpC,OAAAc,EAAA,EAAAd,CAACgB,EAAA,EAAD,CAAOxB,KAAI,QAAU0C,EAAV,WACXlC,OAAAc,EAAA,EAAAd,CAACgB,EAAA,EAAD,CAAcxB,KAAI,QAAU0C,EAAV,YAEnB3C,EAAIgB,WAAWjB,IAAI,SAAC+C,EAAUC,GAAX,OAClBtC,OAAAc,EAAA,EAAAd,CAAA,OACEe,UAAU,MACVoB,IAAKG,EACLT,IAAKA,YAAFU,MAIHvC,OAAAc,EAAA,EAAAd,CAACgB,EAAA,EAAD,CACExB,KAAI,QAAU0C,EAAV,gBAAkCI,EAAlC,MAENtC,OAAAc,EAAA,EAAAd,CAACgB,EAAA,EAAD,CACExB,KAAI,QAAU0C,EAAV,gBAAkCI,EAAlC,YAMhBtC,OAAAc,EAAA,EAAAd,CAAA,OAAKe,UAAU,OACbf,OAAAc,EAAA,EAAAd,CAAA,OAAKe,UAAU,OACbf,OAAAc,EAAA,EAAAd,CAAA,UACEwC,KAAK,SACLC,QAAS,kBACPT,EAAaU,KAAK,CAChBlD,KAAM,GACNe,WAAYoC,MA3FnB,GA2FqCC,KAAK,GACnChC,GAAIiC,UANV,KAYA7C,OAAAc,EAAA,EAAAd,CAAC8C,EAAAnD,EAAD,CAAQ6C,KAAK,SAASO,UAAWpB,GAAWD,GAA5C","file":"component---src-codesamples-form-adv-js-6e198b93be64fe15d14e.js","sourcesContent":["import React from 'react'\r\nimport { Formik, Form, Field, ErrorMessage, FieldArray } from 'formik'\r\nimport * as Yup from 'yup'\r\n/** @jsx jsx */\r\nimport { jsx, css } from '@emotion/core'\r\nimport uuid from 'uuid/v4'\r\nimport Button from '@material-ui/core/Button'\r\n\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\n\r\nconst schema = () => {\r\n  return Yup.lazy(values => {\r\n    const lotNames = values.lots\r\n      .map(lot => lot.name)\r\n      .map(name => ({ count: 1, name }))\r\n      .reduce((a, b) => {\r\n        a[b.name] = (a[b.name] || 0) + b.count\r\n        return a\r\n      }, {})\r\n    console.log(lotNames)\r\n    const duplicateLotNames = Object.keys(lotNames).filter(a => lotNames[a] > 1)\r\n\r\n    return Yup.object().shape({\r\n      lots: Yup.array().of(\r\n        Yup.object().shape({\r\n          name: Yup.string()\r\n            .notOneOf(duplicateLotNames, 'lotname has to be unique')\r\n            .required('required'),\r\n          quantities: Yup.array().of(\r\n            Yup.number()\r\n              .typeError('must be number')\r\n              .min(0, 'must be positive')\r\n              .integer('must be integer')\r\n          ),\r\n        })\r\n      ),\r\n    })\r\n  })\r\n}\r\n\r\nconst countSizes = 3\r\n\r\nconst initialValues = {\r\n  lots: [\r\n    {\r\n      name: 'Test',\r\n      quantities: ['021111', '123', '231'],\r\n      id: '105d668b-0912-4bff-91b4-3aec881bb6ce',\r\n    },\r\n    {\r\n      name: 'sdfsd',\r\n      quantities: ['01', '21', '12'],\r\n      id: '4041e2a2-6d47-42c1-8bf1-a3084e48992f',\r\n    },\r\n  ],\r\n}\r\n\r\nexport default () => (\r\n  <div className=\"container-fluid\">\r\n    <h1 className=\"row\">Any place in your app</h1>\r\n    <Formik\r\n      initialValues={initialValues}\r\n      validationSchema={schema}\r\n      onSubmit={(values, { setSubmitting }) => {\r\n        setTimeout(() => {\r\n          alert(JSON.stringify(values, null, 2))\r\n          setSubmitting(false)\r\n        }, 400)\r\n      }}\r\n    >\r\n      {({ isSubmitting, values, isValid, resetForm }) => (\r\n        <Form>\r\n          <div className=\"row\">\r\n            <div\r\n              className=\"col-3\"\r\n              css={css`\r\n                background-color: turquoise;\r\n              `}\r\n            >\r\n              Name of lot\r\n            </div>\r\n            <div\r\n              className=\"col\"\r\n              css={css`\r\n                background-color: pink;\r\n              `}\r\n            >\r\n              Quantities\r\n            </div>\r\n          </div>\r\n          <FieldArray name=\"lots\">\r\n            {arrayHelpers => (\r\n              <div>\r\n                {values.lots &&\r\n                  values.lots.length > 0 &&\r\n                  values.lots.map((lot, lotIndex) => (\r\n                    <div className=\"row\" key={lot.id}>\r\n                      <div\r\n                        className=\"col-3\"\r\n                        css={css`\r\n                          background-color: turquoise;\r\n                        `}\r\n                      >\r\n                        <Field name={`lots[${lotIndex}].name`} />\r\n                        <ErrorMessage name={`lots[${lotIndex}].name`} />\r\n                      </div>\r\n                      {lot.quantities.map((quantity, quantityIndex) => (\r\n                        <div\r\n                          className=\"col\"\r\n                          key={quantityIndex}\r\n                          css={css`\r\n                            background-color: pink;\r\n                          `}\r\n                        >\r\n                          <Field\r\n                            name={`lots[${lotIndex}].quantities[${quantityIndex}]`}\r\n                          />\r\n                          <ErrorMessage\r\n                            name={`lots[${lotIndex}].quantities[${quantityIndex}]`}\r\n                          />\r\n                        </div>\r\n                      ))}\r\n                    </div>\r\n                  ))}\r\n                <div className=\"row\">\r\n                  <div className=\"col\">\r\n                    <button\r\n                      type=\"button\"\r\n                      onClick={() =>\r\n                        arrayHelpers.push({\r\n                          name: '',\r\n                          quantities: Array(countSizes).fill(0),\r\n                          id: uuid(),\r\n                        })\r\n                      }\r\n                    >\r\n                      +\r\n                    </button>\r\n                    <Button type=\"submit\" disabled={!isValid || isSubmitting}>\r\n                      Submit\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </FieldArray>\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  </div>\r\n)\r\n"],"sourceRoot":""}