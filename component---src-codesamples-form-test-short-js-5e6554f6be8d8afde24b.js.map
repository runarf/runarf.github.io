{"version":3,"sources":["webpack:///./src/codesamples/formTestShort.js"],"names":["schema","Yup","shape","accounts","of","email","required","password","min","__webpack_exports__","Object","_emotion_core__WEBPACK_IMPORTED_MODULE_5__","className","class","formik__WEBPACK_IMPORTED_MODULE_3__","initialValues","nickNames","validationSchema","onSubmit","values","_ref","setSubmitting","setTimeout","alert","JSON","stringify","_ref2","isSubmitting","name","arrayHelpers","map","account","index","key","type","component","onClick","remove","push","disabled"],"mappings":"iJAcMA,UAASC,WAAaC,MAAM,CAChCC,SAAUF,UAAYG,GACpBH,WAAaC,MAAM,CACjBG,MAAOJ,WACJI,MAAM,iBACNC,SAAS,YACZC,SAAUN,WACPO,IAAI,EAAG,sBACPF,SAAS,kBAIHG,EAAA,0BACbC,OAAAC,EAAA,EAAAD,CAAA,OAAKE,UAAU,mBACbF,OAAAC,EAAA,EAAAD,CAAA,MAAIG,MAAM,OAAV,yBAGAH,OAAAC,EAAA,EAAAD,CAACI,EAAA,EAAD,CACEC,cAAe,CACbZ,SAAU,CACR,CACEa,UAAW,GACXX,MAAO,cACPE,SAAU,SAIhBU,iBAAkBjB,EAClBkB,SAAU,SACRC,EADQC,GAGL,IADDC,EACCD,EADDC,cAEFC,WAAW,WACTC,MACEC,KAAKC,UACHN,EACA,KACA,IAGJE,GAAc,IACb,OAGJ,SAAAK,GAAA,IAAGC,EAAHD,EAAGC,aAAcR,EAAjBO,EAAiBP,OAAjB,OACCT,OAAAC,EAAA,EAAAD,CAACI,EAAA,EAAD,KACEJ,OAAAC,EAAA,EAAAD,CAACI,EAAA,EAAD,CAAYc,KAAK,YACd,SAAAC,GAAY,OACXnB,OAAAC,EAAA,EAAAD,CAAA,WACGS,EAAOhB,SAAS2B,IACf,SAACC,EAASC,GAAV,OACEtB,OAAAC,EAAA,EAAAD,CAAA,OACEE,UAAU,MACVqB,IAAKD,GAELtB,OAAAC,EAAA,EAAAD,CAAA,OAAKE,UAAU,OACbF,OAAAC,EAAA,EAAAD,CAACI,EAAA,EAAD,CACEoB,KAAK,QACLN,KAAI,YAAcI,EAAd,YAENtB,OAAAC,EAAA,EAAAD,CAACI,EAAA,EAAD,CACEc,KAAI,YAAcI,EAAd,UACJG,UAAU,SAGdzB,OAAAC,EAAA,EAAAD,CAAA,OAAKE,UAAU,OACbF,OAAAC,EAAA,EAAAD,CAACI,EAAA,EAAD,CACEoB,KAAK,WACLN,KAAI,YAAcI,EAAd,eAENtB,OAAAC,EAAA,EAAAD,CAACI,EAAA,EAAD,CACEc,KAAI,YAAcI,EAAd,aACJG,UAAU,SAGdzB,OAAAC,EAAA,EAAAD,CAAA,UACEE,UAAU,QACVsB,KAAK,SACLE,QAAS,kBACPP,EAAaQ,OACXL,KALN,QAcNtB,OAAAC,EAAA,EAAAD,CAAA,UACEwB,KAAK,SACLE,QAAS,kBACPP,EAAaS,KAAK,CAChBjC,MAAO,GACPE,SAAU,OALhB,KAWAG,OAAAC,EAAA,EAAAD,CAAA,UACEwB,KAAK,SACLK,SACEZ,GAHJ","file":"component---src-codesamples-form-test-short-js-5e6554f6be8d8afde24b.js","sourcesContent":["import React from 'react'\nimport {\n  Formik,\n  Form,\n  Field,\n  ErrorMessage,\n  FieldArray,\n} from 'formik'\nimport * as Yup from 'yup'\n/** @jsx jsx */\nimport { jsx, css } from '@emotion/core'\n\nimport 'bootstrap/dist/css/bootstrap.css'\n\nconst schema = Yup.object().shape({\n  accounts: Yup.array().of(\n    Yup.object().shape({\n      email: Yup.string()\n        .email('invalid email')\n        .required('Required'),\n      password: Yup.string()\n        .min(6, 'too short password')\n        .required('Required'),\n    })\n  ),\n})\nexport default () => (\n  <div className=\"container-fluid\">\n    <h1 class=\"row\">\n      Any place in your app\n    </h1>\n    <Formik\n      initialValues={{\n        accounts: [\n          {\n            nickNames: [],\n            email: 'test@sa.com',\n            password: 'asa',\n          },\n        ],\n      }}\n      validationSchema={schema}\n      onSubmit={(\n        values,\n        { setSubmitting }\n      ) => {\n        setTimeout(() => {\n          alert(\n            JSON.stringify(\n              values,\n              null,\n              2\n            )\n          )\n          setSubmitting(false)\n        }, 400)\n      }}\n    >\n      {({ isSubmitting, values }) => (\n        <Form>\n          <FieldArray name=\"accounts\">\n            {arrayHelpers => (\n              <div>\n                {values.accounts.map(\n                  (account, index) => (\n                    <div\n                      className=\"row\"\n                      key={index}\n                    >\n                      <div className=\"col\">\n                        <Field\n                          type=\"email\"\n                          name={`accounts[${index}].email`}\n                        />\n                        <ErrorMessage\n                          name={`accounts[${index}].email`}\n                          component=\"div\"\n                        />\n                      </div>\n                      <div className=\"col\">\n                        <Field\n                          type=\"password\"\n                          name={`accounts[${index}.password]`}\n                        />\n                        <ErrorMessage\n                          name={`accounts[${index}.password]`}\n                          component=\"div\"\n                        />\n                      </div>\n                      <button\n                        className=\"col-1\"\n                        type=\"button\"\n                        onClick={() =>\n                          arrayHelpers.remove(\n                            index\n                          )\n                        }\n                      >\n                        -\n                      </button>\n                    </div>\n                  )\n                )}\n                <button\n                  type=\"button\"\n                  onClick={() =>\n                    arrayHelpers.push({\n                      email: '',\n                      password: '',\n                    })\n                  }\n                >\n                  +\n                </button>\n                <button\n                  type=\"submit\"\n                  disabled={\n                    isSubmitting\n                  }\n                >\n                  Submit\n                </button>\n              </div>\n            )}\n          </FieldArray>\n        </Form>\n      )}\n    </Formik>\n  </div>\n)\n"],"sourceRoot":""}